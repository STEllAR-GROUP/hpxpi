.. Copyright (c) 2007-2014 Louisiana State University

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

---------------------------
Release Procedure for HPXPI
---------------------------

Below is a step-wise procedure for making an HPXPI release.

This is a living document and may not be totally current or accurate.
It is an attempt to capture current practice in making an HPXPI release.
Please update it as appropriate.

One way to use this procedure is to print a copy and check off
the lines as they are completed to avoid confusion.

#.  Notify developers that a release is imminent. 

#.  Make a list of examples and benchmarks that should not go into the release.
    Build all examples and benchmarks that will go in the release and make sure
    they build and run as expected. 

    *   Make sure all examples and benchmarks have example input files, and
        usage documentation, either in the form of comments or a readme. 

#.  Send the list of examples and benchmarks that will be included in the
    release to hpx-users@stellar.cct.lsu.edu and stellar@cct.lsu.edu, and ask 
    for feedback. Update the list as necessary.

#.  Write release notes for the blog to summarize the major changes listed in
    the log. The blog article should go in the "downloads" section. The url of
    the blog article should follow this format (where # are version numbers)::

        stellar.cct.lsu.edu/downloads/hpxpi-v#-#-#-release-notes

    Save the blog article as a draft. 

#.  Delete the old release branch, and create a new one by branching a stable
    point from master. 

#.  Checkout the main branch, and bump the HPXPI version to the next release
    target. The following files contain version info:

        *   ``hpxpi/config/version.h``
        *   ``docs/hpxpi.qbk``
        *   ``CMakeLists.txt``

#.  Remove the examples and benchmarks that will not go into the release from
    the release branch.

#.  Tag a release candidate from the release branch.

#.  Notify hpx-users@stellar.cct.lsu.edu and stellar@cct.lsu.edu of the
    availability of the release candidate. Ask users to test the candidate by 
    checking out the release candidate tag.

#.  Allow at least a week for testing of the release candidate. Pull in changes
    as needed from master to resolve bug fixes, etc.

    *   Use ``git merge`` when possible, and fall back to ``git cherry-pick``
        when needed.

#.  Tag the release.

#.  Roll a release candidate using ``tools/roll_release.sh``, and add the
    hashsums generated by the script to the "downloads" page of the website.

#.  Post the draft of the release notes.

#.  Upload the packages and generated documentation to the website. Use the following
    formats::

        http://stellar.cct.lsu.edu/files/hpxpi_#.#.#.zip
        http://stellar.cct.lsu.edu/files/hpxpi_#.#.#.tar.gz
        http://stellar.cct.lsu.edu/files/hpxpi_#.#.#.tar.bz2
        http://stellar.cct.lsu.edu/files/hpxpi_#.#.#.7z
        http://stellar.cct.lsu.edu/files/hpxpi_#.#.#/html
        http://stellar.cct.lsu.edu/files/hpxpi_#.#.#/html/code
        http://stellar.cct.lsu.edu/downloads/hpxpi-v#-#-#-release-notes

#.  Write a new blog post announcing the release.

#.  Announce the release on hpx-users@stellar.cct.lsu.edu, 
    stellar@cct.lsu.edu, isocpp.org, HPC Wire, and a CCT press release.

#.  Beer and pizza.

